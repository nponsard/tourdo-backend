openapi: "3.0.2"
info:
  title: Tournament manager
  version: "1.0"
servers:
  - url: http://localhost:8080/api/v1
    description: localhost
  - url: https://dev.juno.nponsard.net/api/v1
    description: dev server
  - url: https://tournament.juno.nponsard.net/api/v1
    description: prod server

paths:
  /users:
    get:
      summary: search users
      description: search users
      tags:
        - users

      parameters:
        - in: query
          name: search
          description: search users
          schema:
            type: string
          required: false
        - in: query
          name: limit
          description: limit the number of result, default 10
          schema:
            type: integer
          required: false
        - in: query
          name: offset
          description: offset the number of result, default 0
          schema:
            type: integer
          required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      $ref: "#/components/schemas/user"
                  total:
                    type: integer
                    description: Total number of users
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /users/me:
    get:
      summary: Get current user info
      tags:
        - users
      security:
        - jwt: []

      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update current user password
      description: Update user password, must be the user himself, different from PATCH /user/{id} as it requires the confirmation of the old password and you canâ€™t edit the admin property
      tags:
        - "users"
      security:
        - jwt: []
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  description: Old password
                new_password:
                  type: string
                  description: New password
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/{id}/teams:
    get:
      summary: Get teams the user participates in
      tags:
        - "users"
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  username:
                    type: string
                  admin:
                    type: boolean
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /users/{id}:
    get:
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  username:
                    type: string
                  admin:
                    type: boolean
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

    patch:
      description: Update user info/password, must be admin
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      tags:
        - "users"
      security:
        - jwt: []
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  nullable: true
                  type: string
                admin:
                  nullable: true
                  type: boolean
      responses:
        "200":
          description: User updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"

        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      description: Delete a user, the user doing the request must be an admin or the user to delete
      tags:
        - "users"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: User deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"

        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/register:
    post:
      tags:
        - "users"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  username:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /users/login:
    post:
      tags:
        - "users"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successfull
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          description: Invalid password/username
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /users/logout:
    post:
      description: Logout the user and revoke the token and refresh token
      tags:
        - "users"
      security:
        - jwt: []
      responses:
        "200":
          description: Logout successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tokens/refresh:
    post:
      tags:
        - "tokens"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
      responses:
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  refresh_token:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /teams:
    get:
      summary: Get all teams
      tags:
        - "teams"
      parameters:
        - in: query
          name: limit
          schema:
            type: number
          description: Number of teams to return
          required: false
        - in: query
          name: offset
          schema:
            type: number
          description: Offset of the teams to return, default 0
          required: false
        - in: query
          name: search
          schema:
            type: string
          description: Search for a team by name
          required: false
      responses:
        "200":
          description: Teams found
          content:
            application/json:
              schema:
                type: object
                properties:
                  teams:
                    type: array
                    items:
                      $ref: "#/components/schemas/team"
                  total:
                    type: number
                    description: Total number of teams
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      description: Create a new team, the user doing the request is automatically added to the team as captain
      tags:
        - "teams"
      security:
        - jwt: []
      requestBody:
        description: Team info
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                empty:
                  type: boolean
                  nullable: true
                  description: set to true to not be added to the team, for admins only
      responses:
        "201":
          description: Team created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: number
                  name:
                    type: string
                  description:
                    type: string
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}:
    get:
      summary: Get info about a team
      tags:
        - "teams"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Team found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update a team info
      description: Update a team info, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: Team info
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        "200":
          description: Team updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete a team
      description: Delete a team, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Team deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}/tournaments:
    get:
      summary: Get all tournaments of a team
      tags:
        - "teams"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Tournaments found
          content:
            application/json:
              schema:
                type: object
                properties:
                  tournaments:
                    type: array
                    items:
                      $ref: "#/components/schemas/tournament"
                  total:
                    type: number
                    description: Total number of tournaments
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}/users:
    get:
      summary: Get all players of a team
      tags:
        - "teams"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/user"
                    role:
                      type: number
                    team_id:
                      type: number
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /teams/{id}/users/{userID}:
    put:
      summary: Add a player to a team
      description: Add a player to a team, the user must be admin or captain of the team
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: userID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: User info
        content:
          application/json:
            schema:
              type: object
              properties:
                role:
                  type: number
                  description: 1 = captain, 0 = player
      responses:
        "200":
          description: User added to team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Remove a player from a team
      description: Remove a player from a team, the user doing the action must be admin, captain of the team or the player to remove
      tags:
        - "teams"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: userID
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: User removed from team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /matches:
    # get:
    #   summary: Get a list of matches
    #   tags:
    #     - "matches"
    #   parameters:
    #     - in: query
    #       name: limit
    #       schema:
    #         type: number
    #       description: Number of matches to return
    #       required: false
    #     - in: query
    #       name: offset
    #       schema:
    #         type: number
    #       description: Offset of the matches to return, default 0
    #       required: false
    #     - in: query
    #       name: status
    #       schema:
    #         type: string
    #       description: Status of the matches to return, default all
    #       required: false
    #   responses:
    #     "200":
    #       description: Matches found
    #       content:
    #         application/json:
    #           schema:
    #             type: array
    #             items:
    #               $ref: "#/components/schemas/match"
    #     "400":
    #       $ref: "#/components/responses/400BadRequest"
    #     "401":
    #       $ref: "#/components/responses/401Unauthorized"
    #     "403":
    #       $ref: "#/components/responses/403Forbidden"
    #     "500":
    #       $ref: "#/components/responses/500InternalServerError"
    post:
      summary: Create a match
      description: Create a match, if tournament_id is specified, the user must be a tournament organizer or an admin and must specify the row and column of the match
      tags:
        - "matches"
      security:
        - jwt: []
      requestBody:
        description: Match info
        content:
          application/json:
            schema:
              type: object
              properties:
                team1:
                  type: number
                team2:
                  type: number
                date:
                  type: string
                tournament_id:
                  type: number
                  nullable: true
                row:
                  type: number
                  nullable: true
                column:
                  type: number
                  nullable: true

      responses:
        "200":
          description: Match created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /matches/{id}:
    get:
      summary: Get a match
      tags:
        - "matches"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Match found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete a match
      tags:
        - "matches"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Match deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update a match
      description: Update a match, the user must be admin or organizer of the tournament, if changing the tournament_id, the user must be admin or organizer of both
      tags:
        - "matches"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: Match info
        content:
          application/json:
            schema:
              type: object
              properties:
                team1_id:
                  type: number
                  nullable: true
                team2_id:
                  type: number
                  nullable: true
                date:
                  type: number
                  nullable: true
                row:
                  type: number
                  nullable: true
                column:
                  type: number
                  nullable: true
                status:
                  type: number
                  nullable: true
      responses:
        "200":
          description: Match updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tournaments:
    get:
      summary: Get all tournaments
      tags:
        - "tournaments"

      parameters:
        - in: query
          name: limit
          schema:
            type: number
          description: Number of matches to return
          required: false
        - in: query
          name: offset
          schema:
            type: number
          description: Offset of the matches to return, default 0
          required: false
        - in: query
          name: search
          schema:
            type: string
          description: Search for string in tournaments name
          required: false

      responses:
        "200":
          description: Tournaments found
          content:
            application/json:
              schema:
                type: object
                properties:
                  tournaments:
                    type: array
                    items:
                      $ref: "#/components/schemas/tournament"
                  total:
                    type: number
                    description: Total number of tournaments
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    post:
      summary: Create a tournament
      description: Create a tournament, the user must be an admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      requestBody:
        description: Tournament info
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: number
                name:
                  type: string
                start_date:
                  type: string
                end_date:
                  type: string
                description:
                  type: string
                max_teams:
                  type: number
                game_name:
                  type: string

      responses:
        "201":
          description: Tournament created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tournament"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /tournaments/{id}:
    get:
      summary: Get a tournament
      tags:
        - "tournaments"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Tournament found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tournament"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete a tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Tournament deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update a tournament
      description: Update a tournament, the user must be admin or organizer of the tournament, canâ€™t update type because it requires too much changes.
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: Tournament info
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  nullable: true
                start_date:
                  type: string
                  nullable: true
                end_date:
                  type: string
                  nullable: true
                description:
                  type: string
                  nullable: true
                max_teams:
                  type: number
                  nullable: true
                game_name:
                  type: string
                  nullable: true
                status:
                  type: number
                  nullable: true
      responses:
        "200":
          description: Tournament updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tournament"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tournaments/{id}/teams:
    get:
      summary: Get all teams of a tournament
      tags:
        - "tournaments"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Teams found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    team:
                      $ref: "#/components/schemas/team"
                    team_number:
                      type: number
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tournaments/{id}/teams/shuffle:
    post:
      summary: Shuffle teams of a tournament
      description: must be admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Teams shuffled
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /tournaments/{id}/matches:
    get:
      summary: Get all matches of a tournament
      tags:
        - "tournaments"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Matches found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/match"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /tournaments/{id}/matches/generate:
    post:
      summary: Generate matches of a tournament
      description: must be admin or organizer of the tournament, deletes all existing matches of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Matches generated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

  /tournaments/{id}/teams/{teamID}:
    put:
      summary: Add a team in a tournament
      description: must be admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: teamID
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Team added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Delete a team from a tournament
      description: must be admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: teamID
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Team deleted
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    patch:
      summary: Update team position in a tournament
      description: must be admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: teamID
          in: path
          required: true
          schema:
            type: number
      requestBody:
        description: Team position
        content:
          application/json:
            schema:
              type: object
              properties:
                team_number:
                  type: number
                  nullable: true
      responses:
        "200":
          description: Team updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /tournaments/{id}/organizers:
    get:
      summary: Get all organizers of a tournament
      tags:
        - "tournaments"
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Organizers found
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/user"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
  /tournaments/{id}/organizers/{user_id}:
    put:
      summary: Add an organizer to a tournament
      description: must be admin or organizer of the tournament
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: user_id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Organizer added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"
    delete:
      summary: Remove an organizer from a tournament
      description: must be admin or the user himself
      tags:
        - "tournaments"
      security:
        - jwt: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: number
        - name: user_id
          in: path
          required: true
          schema:
            type: number
      responses:
        "200":
          description: Organizer removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/message"
        "400":
          $ref: "#/components/responses/400BadRequest"
        "401":
          $ref: "#/components/responses/401Unauthorized"
        "403":
          $ref: "#/components/responses/403Forbidden"
        "500":
          $ref: "#/components/responses/500InternalServerError"

components:
  securitySchemes:
    jwt:
      type: apiKey
      in: header
      name: Authorization
      description: JWT token
  responses:
    "400BadRequest":
      description: Bad request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"

    "401Unauthorized":
      description: Invalid token
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
    "403Forbidden":
      description: not enough permissions
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
    "500InternalServerError":
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/message"
  schemas:
    message:
      type: object
      description: object containing a message
      properties:
        message:
          type: string
    user:
      type: object
      description: User object
      properties:
        id:
          type: number
        username:
          type: string
        admin:
          type: boolean
    team:
      type: object
      description: Team object
      properties:
        id:
          type: number
        name:
          type: string
        description:
          type: string
        win_count:
          type: number
        match_count:
          type: number
    match:
      type: object
      description: Match object
      properties:
        id:
          type: number
        team1_id:
          type: number
        team2_id:
          type: number
        row:
          type: number
          nullable: true
        column:
          type: number
          nullable: true
        tournament_id:
          type: number
          nullable: true
        winner_id:
          type: number
          nullable: true
        date:
          type: number
    tournament:
      type: object
      description: Tournament object
      properties:
        id:
          type: number
        type:
          type: number
        name:
          type: string
        start_date:
          type: number
        end_date:
          type: number
        description:
          type: string
        status:
          type: number
        game_name:
          type: string
        max_teams:
          type: number

tags:
  - name: users
    description: User management
  - name: tournaments
    description: Tournament management
  - name: tokens
    description: Token management
  - name: teams
    description: Team management
  - name: matches
    description: Match management
  # - name: games
  # description: Game management
